import { Component, EventEmitter, Input, Output } from '@angular/core';
import { MtgApiService } from '../../services/mtgApi.service';

@Component({
	providers: [MtgApiService],
	selector: 'mtg-main',
	styleUrls: ['./mtgMain.component.scss'],
	templateUrl: './mtgMain.component.html'
})

export class MtgMainComponent {
	constructor(private mtgService:MtgApiService) {}

	// the cards array holds the array of results generated by mtgService
	private cards = [];

	// showPop is tied to the ngIf that controls whether the popbar is displayed
	private showPop = false;

	// TODO: see if showmodal is necessary. should be able to tie the ngIf to the truthy of modalInfo
	// showModal is tied to the ngIf in mtgMain.component.html and determines whether the modal will be displayed
	@Input() showModal: boolean = false;

	// this variable is received from app.component and sent to full-modal. it contains the information in the modal
	@Input() modalInfo: any;

	// closeModalToApp is the middleman variable connecting full-modal to app.component
	// this is necessary to change the value of app.component's showModal property
	@Output() closeModalToApp = new EventEmitter<boolean>();

	closeModal(bool:boolean) {
		this.showModal = bool;
		this.closeModalToApp.emit(false);
	}

	// test case for the mtgService. returns cards with the name Feldon
	public getFeldon() {
		this.mtgService.getCardByName('feldon').subscribe(result => {
			console.log(result.cards);
			this.cards = result.cards;
		});
	}

	// TODO: phase this creation method out for an ngIf method. May be superior to the ngIf method due to the fact that multiple popbars could exist at once
	// creates a notification popbar
	createPopBar():void {
		const mtgMainDom = document.getElementsByTagName('mtg-main')[0];
		let popBarDom = document.createElement('pop-bar');
		mtgMainDom.appendChild(popBarDom);
	}

	// used to remove the popbar notification from the screen
	removePop(show:boolean) {
		this.showPop = show;
}
}
